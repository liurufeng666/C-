1、运算符：
1>优先级：1 + 2 * 3  先运算乘法，后运算加法
2>结合性：1 + 2 + 3  先运算1+2后运算3+3
3>参与运算的操作数的个数：
  +（加法运算符）  两个操作数 二元运算符 双目运算符
  &（取地址符）    一个操作数 一元运算符 单目运算符
4>优先级：算术运算符 > 关系表达式 > 逻辑运算符 > 赋值运算
符 > 逗号运算符
5>如果一个表达式中运算符种类很多，通过小括号确定运算顺序
2、算术运算符：+ 、 - 、 * 、 / 、 % 、 ++ 、 -- 
1）算术表达式的结果的类型由左右操作数的类型决定。
1 + 2   => 3     int
1.0 + 2 => 3.0   double
4 / 3   => 1     int
4.0 / 3 =>1.33… double
2）“/”除法运算符 右操作数不能为0
  “%”取余运算符 取模运算符
C语言中取余的结果符号有左操作数决定
3）++ 、-- 自增、自减运算符
前自增 ++操作数：先自加1，后取值
后自增 操作数++：先取值，后自加1
在一个表达式中，如果对一个变量进行自增或自减，则不要让这个变量在表达式中再次出现；自增自减的操作数必须是可修改的左值
++i与i++ 相比，++i的效率更高一些
3、赋值运算符：
   赋值运算符优先级倒数第二
   简单赋值运算符：=
   复合赋值运算符：+= 、-= 、*= 、/= 、%= 
      a += 3 ,  a = a + 3
4、关系运算符：> 、 < 、 >= 、 <= 、 ==（判等） 、 !=
关系运算符的结果：1 或者 0
(1：关系成立    例如：1 > 0       )
(0：关系不成立  例如：1 ！= 1     )
区分出C语言中关系运算符的使用和数学中使用的区别
  1 < = a < = 5  在C语言中不能这样写，这样写的结果恒为1
5、逻辑运算符：
1)
C语言中无法直接表示真假（没有True/False），通过整数来表示真假
操作数中：  非0表示真  0表示假
结果中  ：  1表示真    0表示假
2)
&&逻辑与：
真&&真——>真、真&&假——>假、假&&真——>假、假&&假——>假   ||逻辑或：
真||真——>真、真||假——>真、假||真——>真、假||假——>假
！逻辑非：
！真——>假、！假——>真
3)
逻辑短路问题：
 逻辑或短路：
    当逻辑获得左操作数为真时，结果必然为真，则右操作数不执行
 逻辑与短路：
当逻辑获得左操作数为假时，结果必然为假，则右操作数不执行
4)
逻辑运算符经常配合关系运算符，确定数值区间范围
   判断a是否属于[1,5]范围：a >= 1 && a <= 5
   判断a是否属于[1,5]范围：a < 1  || a > 5
                          !( a >= 1 && a <= 5)
6、条件运算符：
      ？：  三元运算符  三目运算符
“操作数1？操作数2：操作数3”
通过判断表达式1的真假，选择表达式2<真>或表达式3<假>进行执行，并将其作为条件表达式的值。
7、位运算符：
&  位与运算符 
-操作数1&操作数2
 -将操作数1与操作数2的补码按位进行与运算
-判断奇偶：a % 2 == 1    1奇数 0偶数
          a & 1         1奇数 0偶数
|  位或运算符
    -操作数1 | 操作数2
    -将操作数1与操作数2按位进行或运算
~  位非运算符
-	~操作数
-	将操作数按位进行非运算
^  位异或运算符
   -异或规则，相同为0 不同为1
    1异或1：0 ；0异或0：0 ；1异或0：1 ；0异或1：1
   -操作数1 ^ 操作数2
   -将操作数1与操作数2按位进行位异或运算
<<位左移运算符
   -操作数1 << 操作数2
   -将操作数1整体按位往左移操作数2位,
移出部分舍弃，空出部分补0
     -一个数左移n位，相当于乘以2的n次方
     -位左移很容易发生溢出（一般对一定范围内的正整数进行左移操作，负整数位左移的行为属于未定义的行为）
>>位右移运算符
   -操作数1 >> 操作数2
   -将操作数1整体按位往右移操作数2位
   -一个数往右移动n位，相当于整除2的n次方（通常情况下只对正整数位右移，负整数属于未定义行为）
8、逗号运算符：优先级最低
二元运算符，结合性从左到右，逗号表达式的结果就是逗号运算符的右操作数
9、求字节数运算符：
sizeof()  是运算符，不是函数
求内存字节数，参数可以是数据类型、字面值、表达式、变量。
10、数据类型转换：
-显示类型转换（强制类型转换）：
<建议使用显示类型转换，不建议使用隐式类型转换>
可读性强、更可控
-隐式类型转换：
由编译器帮我们完成的类型转换称为隐式类型转换
类型提升：
long double
double
float
long long
long
int
short
char
short、char只要是参与运算，先提升到int
short + char = int
11、内存溢出：由于数值数据类型都有数值范围，当两个数据发生运算时，其结果就有可能超出结果类型的数值范围，这种现象称为溢出。
注意：溢出是未定义的行为；程序员要尽量避免溢出。
十六进制的最大值（int）0x7FFFFFFF（+1得到最小值）
十六进制的最小值（int）（-1得到最大值）

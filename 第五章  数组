1、数组：(存放)类型相同的数据元素的集合。
2、数组元素可由基本数据类型或构造类型组成，
-数组属于构造类型（构造数据类型）
由已有的类型组成的新的类型
Int a[10];//int [10]
-定义数组时，数组长度只能是大于0的整型字面值
     Int a[10];int b[1+2];  //√
     Int len=10;int a[len]; //×
3、下标：C语言通过下标来访问数组当中的元素
-下标范围：0~数组长度-1
-在数组定义语句中，[]中间出现的是数组长度，之后出现的都是下标。
4、初始化：在定义数组的同时对读书族元素进行初始化
-数组的初始化是通过初始化列表完成的
-按照数组元素的顺序与初始化列表里面熟知的顺序依次赋初值
-数组中的元素要么都不初始化，要么都初始化，默认初始化的值为0；
-部分初始化
初始化列表里面的值的个数小于数组长度
初始化列表中已给出值会对对应元素进行初始化，未给定值的元素会初始化成0
******如希望数组中所有元素都初始化成0，可用如下方法：
int a[100000]={0};
-全部初始化（整体初始化）
	初始化列表里面值的个数与数组长度相等
	Int a[4]={1,2,3,4}
a[0]=1   a[1]=2  a[2]=3   a[3]=4
-省略长度初始化
	没有给定数组长度，由编译器根据初始化列表元素个数介绍数组长度。如果没有初始化列表，则不能省略长度初始化。
可以通过sizeof运算符求取数组长度
sizeof（数组名）    sizeof（元素类型）
5、二维数组：某个一维数组的每一个元素都是一个一维数组。这种数组我们叫做二维数组。
【格式】：类型名  数组名[行数][列数]
6、二维数组的初始化
	按行全部赋初值：
	例如：int  x[2][3] = { { 1, 2, 3 },  { 4, 5, 6 } };
	顺序全部赋初值：
	例如：int  x[2][3] = { 1, 2, 3, 4, 5, 6 };
	部分赋初值：（按存储顺序）
	例如：int  x[2][3] = { 1, 2, 4 };
	部分赋初值：（按行部分赋值）
	例如：int  x[2][3] = { { 1, 2 }, { 4 } };
	未赋值的元素均为0
	要么按行赋值，要么按存储顺序赋值
int  a[2][3]={ {1, 2}, 4, 5 ,6 };   ×
定义时可省略一维长度，不能省略第二维长度！
7、字符串字面值：“abc”
C语言中没有直接存储字符串的类型[Java、c++、PHP、Python…高级语言都有]
C语言中想要存储字符串需要使用【字符数组】
字符数组：存储字符的数组
   char arr[10]；
字符串（存储字符串的字符数组）：通过结束符‘\0’来判断，存储字符串的字符数组中必然含有‘\0’。
Char s1[3]={‘a’,‘b’,‘c’};普通字符数组
Char s2[3]={‘a’,‘b’,‘\0’};字符串
Char s3[3]={‘a’,‘b’};字符串
结束符‘\0’的ASCII码是0，‘\0’== 0
C语言中允许使用字符串字面值直接初始化字符数组，除初始化外，其他时候不允许对字符数组赋值字符串字面值。
char s4[]=“ab”;等价于s2
字符串长度：第一个‘\0’之前字符的个数
字符个数：字符串中字符的个数，包含结束符‘\0’。
字符串的输入输出：
-scanf()/printf() 标准格式输入输出
-读取或输出字符串使用%s
-scanf读取字符串时不需要取地址符
	  char s[50];
	  scanf(“%s”,s);
	  printf(“%s”,s);
-读取字符串时，字符数组长度足够长，理论上接收你程序输入的最长长度
-scanf在读取字符串时，无法读取空格，scanf认为空格、换行等特殊字符是作为输入结束的标识。
-gets()/puts():标准字符串输入/输出函数
	-gets方法可直接读取一行字符串
-puts方法在完成字符串输出后，会在末尾自动输出一个换行符
puts（“”）；等价于printf（“\n”）；
8、 字符串处理函数的实现是相同的，所以C标准进行了封装
与字符串有关的内置函数在头文件string.h中定义
要使用标准库字符串处理函数，程序前应该包含：
#include <string.h>
-strlen()字符串长度
将存有字符串的字符数组名传给strlen，返回字符串长度。
  参数还可以是字符串字面值。
-strcpy()字符串拷贝
  一共有两个参数，第一个叫目标字符串，第二个叫源字符串，将源字符串的内容拷贝到目标字符串。
  目标字符串必须是字符数组，并且长度足够大。
源字符串可以是字符数组也可以是字符串字面值。
-strcmp()字符串比较
  比较两个字符串是否相等；
  结果：
0：字符串相同
		1：字符串1 大于 字符串2
	  -1：字符串1 小于 字符串2
-strcat()字符串拼接
  一共有两个参数，第一个叫目标字符串，第二个叫源字符串，将源字符串拼接到目标字符串的末尾。
  目标字符串必须是字符数，并且长度足够大。
源字符串可以是字符数组也可以是字符串字面值。


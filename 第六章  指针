1、指针
-地址就是指针
-地址也有类型
-&：取地址符（引用符），获取变量的地址
-*：寻址符（解引用符），根据地址找到对应内存
-未初始化的指针变量称为野指针
-初始化成NULL，称为空指针
**：二级指针； ***：三级指针  ……
2、指针支持的运算：
- &、*  取地址、寻址
- =     赋值
- +、-
- >、<、==  关系运算
3、指针+1：往后移动一个单位元素
   指针-1：往前移动一个单位元素
指针 - 指针：两个指针之间单位元素个数
指针 + 指针：没有这种操作，不允许！
【指针并不是都可以进行加减和比较运算的，只有指向数组的指针加减运算才有意义】
4、%p打印指针，%c打印字符串
5、多级指针：指向指针的指针
-可以对一个指针连续寻址[寻址的结果是变量（左值）]
-不可以连续取地址[取地址的结果是值（右值）]
6、如果一个表达式中，对于一个变量，既取地址又寻址，取地址符和寻址符可以省略<消掉>。
例如：*&p==p
7、指针与数组的关系：
	数组名：数组名是一个特殊的指针，数值上表示数组首元素的位置。
访问数组元素的方式：
1）下标法：通过下标运算符及下标来访问
2）指针寻址法：*（指针+数字）
arr[i] == *(arr+i)
i[arr] == *(i+arr)
3）下标法的本质就是指针
数组名和指针的区别：
int arr[5]={11,22,33,44,55}
int * p = arr;
int b=10;
1>	指针允许再赋值【p = &b;】
数组名不允许再赋值【arr = &b;不允许！！！】
2>sizeof运算符运算结果不同
sizeof（p）;//4
sizeof(arr);//12数组长度
3>取地址的结果不同
&p；  //指针变量p的地址
&arr；//数组的地址
			//int（*）[5] ;
arr+1； //移动一个整型单位 4字节
&arr+1；//移动一个数组单位 20字节
数组的地址寻址得到数组首元素的地址
8、多级指针：指向指针的指针
    - 可以对指针进行连续寻址
        寻址的结果是变量(左值)
    - 不可以对变量连续取地址
        取地址的结果是值(右值)
    - 如果一个表达式中，对于一个变量
      即取地址又寻址，取地址符和寻址符
      可以省率。
      例如: *&p == p
            *&*&*p == *p
9、字符串：由字符组成的串
    - C语言中并没有直接提供关于字符串的类型
    - C语言中通过字符数组来实现字符串操作
- 字符串必须以结束符结束（’\0’,ASCII码0）
字符串字面值“abcd”
-字符串字面值得字符以字符数组的形式存储在内存的常量只读区
-字符串字面值的内容不允许修改
-“abcd”本质上是一个指针，指向常量只读区存放这些字符的内存首地址
10、存有字符串的字符数组
-本质上是字符数组
-以字符数组中是否含有结束符’\0’区分
-通常使用数组名来表示这种字符串，数组名就是指向数组首元素的地址指针。
11、const：修饰变量，表示变量为只读变量
-const修饰的变量
-const修饰的变量必须进行初始化
12、const指针：<限定变量的可使用权限><const操作具有传递性>
	int a = 10;
	const int * p = &a; 
	int const * p = &a; 
	int * const p = &a; 
-在指针定义时，看const后面出现的是什么，const后面是什么，表示什么不能被修改
-修饰的是指针指向内存的内存，常量指针，指向常量的指针
	const int * p = &a;//*p不能被修改，p可被修改
	int const * p = &a;//*p不能被修改，p可被修改
-修饰的是指针本身的内存，常指针，指针本身是常量
	int * const p = &a;//p不能被修改，p必须进行初始化
-指针本身不能被修改，指针指向的内存也不能被修改，常量常指针
	const int * const p = &a;// *p不能被修改，p也不能被修改
-丟常操作
	-指针赋值过程中出现丢失const限制的现象，C语言中不允许出现丟常操作。
-加常操作
	-指针赋值过程中出现添加const的现象，C语言中允许。
13、通用指针：void *
-通用指针可以接受任意类型指针的赋值
-通用指针不携带类型信息
-通用指针不能进行寻址操作（解引用操作）
-通用指针赋值给普通指针，需要显示类型转换（强制类型转换）
14、指向数组的指针：
		int arr[4]={11,22,33,44};
		int (* p) [4]=&a;//数组指针（指向数组的指针）
		int *p[4];//指针数组（存放指针的数组）
15、数组地址 寻址 = 数组首元素的地址
一维数组数组名表示：数组首元素的地址
arr[0][0]:第一行第一个元素
&arr[0][0]:第一行第一个元素的地址
&*(arr[0]+0):第一行第一个元素的地址
arr[0]:第一行第一个元素的地址
&arr[1][0]:第二行第一个元素的地址
&*(arr[1]+0):第二行第一个元素的地址
arr[1]:第二行第一个元素的地址
arr[2]:第三行第一个元素的地址
arr:第一行的地址（第一行这个一维数组的地址）
*arr:第一行第一个元素的地址
arr[0]:第一行的地址
arr+0:第一行的地址
arr+1:第二行的地址
arr+2:第三行的地址
&arr+1：移动一个数组单位，指向下一个数组
&arr：数组的地址
